utt_0000 utt 4.40 6.77 -X HI EVERYONE, MY NAME IS HUANG QIANG.
utt_0001 utt 6.77 11.12 -X I AM A RESEARCH FELLOW AT THE NATIONAL UNIVERSITY OF SINGAPORE.
utt_0002 utt 11.12 21.87 -X TODAY I WILL PRESENT OUR WORK ENTITLED “POINT-TO-HYPERPLANE NEAREST NEIGHBOR SEARCH BEYOND THE UNIT HYPERSPHERE.” IT IS A JOINT WORK WITH DR. LEI YIFAN AND DR. ANTHONY TUNG.
utt_0006 utt 26.74 28.11 -X WE FIRST FORMALIZE THIS PROBLEM.
utt_0007 utt 28.17 40.72 -X GIVEN A DATABASE OF N DATA OBJECTS AND A HYPERPLANE QUERY, THE POINT-TO-HYPERPLANE NEAREST NEIGHBOR (NN) SEARCH AIMS TO FIND THE DATA POINT P* WHICH IS CLOSEST TO THE HYPERPLANE QUERY Q.
utt_0009 utt 40.88 43.60 -X FOR EXAMPLE, CONSIDER THE FIGURE ON THE RIGHT.
utt_0010 utt 43.60 46.58 -X THERE ARE THREE DATA POINTS Pone, Ptwo, AND Pthree ON A two-D PLANE,
utt_0011 utt 49.90 54.83 -X AND THERE EXISTS A BLUE LINE WHICH CAN BE CONSIDERED AS A HYPERPLANE QUERY.
utt_0012 utt 55.60 60.98 -X AS YOU CAN SEE, Pone IS THE CLOSEST DATA POINT TO THE HYPERPLANE QUERY.
utt_0013 utt 62.96 69.39 -X SO, Pone IS THE DATA OBJECT P* WE AIM TO FIND FOR THE POINT-TO-HYPERPLANE NEAREST NEIGHBOR SEARCH.
utt_0014 utt 69.81 73.04 -X GIVEN A DATA POINT P AND A HYPERPLANE QUERY Q,
utt_0015 utt 73.26 77.23 -X THE POINT-TO-HYPERPLANE DISTANCE IS DEFINED AS FOLLOWS.
utt_0016 utt 77.36 85.59 -X AS YOU CAN SEE, THE NUMERATOR CONTAINS AN INNER PRODUCT OPERATION AND AN ABSOLUTE VALUE OPERATOR.
utt_0017 utt 85.59 89.30 -X THIS PROBLEM IS MORE DIFFICULT THAN THE CLASSIC POINT-TO-POINT
utt_0018 utt 89.58 92.91 -X NEAREST NEIGHBOR SEARCH BASED ON TWO ASPECTS.
utt_0019 utt 93.61 97.91 -X FIRST, THE DATA POINTS AND THE QUERY ARE NOT IN THE SAME DIMENSION.
utt_0020 utt 97.91 109.04 -X SECOND, SINCE THE POINT-TO-HYPERPLANE DISTANCE CONTAINS THE INNER PRODUCT OPERATION AND THE ABSOLUTE VALUE OPERATOR, IT WILL VIOLATE THE TRIANGLE
utt_0022 utt 109.20 113.87 -X INEQUALITY, AND THEN, SO IT IS NOT A METRIC.
utt_0023 utt 114.03 121.78 -X THEREFORE, MANY STATE-OF-THE-ART METHODS BASED ON THE DISTANCE METRIC PROPERTY MAYBE NOT SUITABLE FOR THIS PROBLEM.
utt_0025 utt 123.98 129.01 -X THIS PROBLEM HAS WIDE APPLICATIONS IN MANY MACHINE LEARNING AND DATA MINING TASKS.
utt_0026 utt 129.01 132.47 -X FOR EXAMPLE, IN THE LARGE-SCALE ACTIVE LEARNING WITH SVMS,
utt_0027 utt 132.88 140.34 -X ITS GOAL IS TO ITERATIVELY GENERATE THE DECISION BOUNDARY OR THE HYPERPLANE QUERY WE CALLED HERE,
utt_0028 utt 140.34 146.48 -X AND THEN THEY WILL ASK THE ANNOTATOR TO LABEL THE MOST UNCERTAIN DATA IN A MASSIVE UNLABELED POOL.
utt_0029 utt 147.60 158.42 -X THE SELECTION CRITERION FOR THE MOST UNCERTAIN DATA IS TO USE THE POINT-TO-HYPERPLANE NN SEARCH TO FIND THE DATA OBJECTS WHICH IS NEAREST TO THE DECISION BOUNDARY.
utt_0031 utt 158.48 167.70 -X FOR EXAMPLE, THE BLUE COLOR WE SHOW HERE. THE DATA POINTS WITH THE BLUE COLOR WE SHOW HERE.
utt_0032 utt 167.70 171.89 -X SO IF WE COULD DESIGN AN EFFICIENT METHOD FOR THE POINT-TO-HYPERPLANE NN SEARCH,
utt_0033 utt 172.08 176.76 -X WE CAN SPEED UP THE LEARNING PERIOD FOR LARGE-SCALE ACTIVE LEARNING.
utt_0034 utt 177.20 187.38 -X THIS PROBLEM ALSO HAS OTHER APPLICATIONS, SUCH AS MAXIMUM MARGIN DIMENSION.. MAXIMUM MARGIN CLUSTERING AND LARGE-MARGIN DIMENSIONALITY REDUCTION.
utt_0036 utt 188.94 196.02 -X IN THE LITERATURE, THERE EXIST MANY HYPERPLANE HASHING SCHEMES FOR THIS CHALLENGING PROBLEM,
utt_0037 utt 196.46 203.32 -X SUCH AS EH WHICH WAS PUBLISHED IN NEURIPS two thousand and ten, BH WHICH WAS PUBLISHED IN ICML two thousand and twelve,
utt_0038 utt 205.33 210.55 -X AND MH AND DSH WHICH WERE ALSO PUBLISHED IN CVPR two thousand and sixteen AND PODS two thousand and eighteen, RESPECTIVELY.
utt_0039 utt 212.63 218.90 -X THEIR BASIC IDEA IS TO ASSUME ALL DATA POINTS ARE ON THE UNIT HYPERSPHERE.
utt_0040 utt 218.93 225.17 -X FOR EXAMPLE, THE Ltwo-NORM OF ALL DATA POINTS ARE NORMALIZED TO one.
utt_0041 utt 225.91 232.41 -X AND THEN THE POINT-TO-HYPERPLANE DISTANCE CAN BE TRANSFORMED INTO THE ANGULAR DISTANCE,
utt_0042 utt 232.41 239.54 -X SO THEY COULD DESIGN DIFFERENT LOCALITY-SENSITIVE HASHING (LSH) FUNCTIONS TO ACHIEVE SUBLINEAR TIME FOR THIS CHALLENGING PROBLEM.
utt_0044 utt 240.11 245.49 -X HOWEVER, THE UNIT HYPERSPHERE ASSUMPTION IS A VERY STRONG ASSUMPTION.
utt_0045 utt 245.65 253.72 -X IN MANY APPLICATIONS SUCH AS DIMENSIONALITY REDUCTION AND CLUSTERING, THIS ASSUMPTION MAY BE
utt_0046 utt 254.23 255.86 -X NOT SATISFIED.
utt_0047 utt 255.86 263.67 -X HOWEVER, IF WITHOUT THIS ASSUMPTION, THESE METHODS MIGHT BE ARBITRARILY BAD FOR THIS PROBLEM.
utt_0048 utt 263.86 272.09 -X WHAT'S WORSE, IF THE POINT-TO-HYPERPLANE DISTANCE IS CLOSE TO zero, THEY WILL REQUIRE ABOUT LINEAR..
utt_0049 utt 272.09 277.88 -X NUMBER.. ABOUT O(N) NUMBER OF HASH TABLES AND NEARLY LINEAR QUERY TIME.
utt_0050 utt 278.35 287.25 -X TO THE BEST OF OUR KNOWLEDGE, THERE IS NO SUBLINEAR TIME METHOD FOR THE POINT-TO-HYPERPLANE NN SEARCH BEYOND THE UNIT HYPERSPHERE.
utt_0052 utt 287.25 296.38 -X ON THE OTHER HAND, FOR THE PROBLEM OF MAXIMUM INNER PRODUCT SEARCH (MIPS), ASYMMETRIC TRANSFORMATION IS A KEY TO REMOVE THE UNIT HYPERSPHERE ASSUMPTION.
utt_0054 utt 297.49 303.42 -X SIMILAR TO THE POINT-TO-HYPERPLANE DISTANCE, THE INNER PRODUCT IS ALSO NOT A METRIC,
utt_0055 utt 303.48 308.28 -X BUT THIS PROBLEM CAN BE WELL SOLVED BY THE ASYMMETRIC LSH IN SUBLINEAR TIME.
utt_0056 utt 308.28 319.10 -X THEIR BASIC IDEA IS TO DESIGN DIFFERENT ASYMMETRIC TRANSFORMATIONS P AND Q FOR THE DATA OBJECTS O AND Q, RESPECTIVELY.
utt_0058 utt 319.10 327.32 -X SO THEY COULD CONVERT THIS DIFFICULT MAXIMUM INNER PRODUCT SEARCH PROBLEM INTO THE CLASSIC POINT-TO-POINT NN SEARCH PROBLEM.
utt_0060 utt 327.44 338.17 -X AND THEN THEY COULD LEVERAGE MANY EFFICIENT SUBLINEAR TIME METHODS FOR POINT-TO-POINT NN SEARCH TO DEAL WITH THIS CHALLENGING MAXIMUM INNER PRODUCT SEARCH PROBLEM.
utt_0062 utt 338.61 350.10 -X HOWEVER, COMPARED WITH THE INNER PRODUCT, THE POINT-TO-HYPERPLANE DISTANCE CONTAINS AN EXTRA ABSOLUTE VALUE OPERATOR, SO EXISTING ASYMMETRIC TRANSFORMATIONS FOR MAXIMUM INNER
utt_0064 utt 350.10 355.61 -X PRODUCT SEARCH CANNOT BE DIRECTLY USED FOR THE POINT-TO-HYPERPLANE NN SEARCH.
utt_0065 utt 356.31 366.39 -X SO AN INTERESTING QUESTION IS THAT, CAN WE DESIGN A NEW ASYMMETRIC TRANSFORMATION FOR THE POINT-TO-HYPERPLANE NN SEARCH PROBLEM?
utt_0067 utt 366.39 376.19 -X BEFORE WE ANSWER THIS QUESTION, SINCE THE FORMULA OF THE POINT-TO-HYPERPLANE DISTANCE IS A BIT COMPLICATED, SO WE FIRST SIMPLIFY THIS DISTANCE.
utt_0069 utt 377.08 383.58 -X WE PROPOSE TWO OPERATIONS IN THE PRE-PROCESSING PHASE BEFORE THE POINT-TO-HYPERPLANE NN SEARCH.
utt_0070 utt 383.67 389.63 -X FIRST, WE EXTEND ALL THE DATA POINTS P BY ONE DIMENSION WITH one.
utt_0071 utt 389.69 400.12 -X FOR EXAMPLE, WE WILL CONSTRUCT A NEW DATA OBJECT O WHICH IS A CONCATENATION OF THE ORIGINAL DATA POINT P WITH A SCALAR VALUE one,
utt_0073 utt 400.57 406.71 -X SO THAT ALL THE DATA OBJECTS O AND THE QUERY Q ARE IN THE SAME DIMENSION.
utt_0074 utt 407.06 416.15 -X SECOND, WE ASSUME THE.. ASSUME THE DENOMINATOR OF THE POINT-TO-HYPERPLANE DISTANCE IS EQUAL TO one
utt_0075 utt 416.57 422.36 -X OTHERWISE, WE COULD RESCALE THE QUERY Q TO SATISFY THIS ASSUMPTION.
utt_0076 utt 422.49 430.54 -X IT IS REASONABLE BECAUSE, FOR THE NON-TRIVIAL QUERY Q, THIS TERM (THE DENOMINATOR) IS FIXED AND
utt_0077 utt 430.74 439.80 -X IS NOT EQUAL TO zero, SO WE COULD ALWAYS DIVIDE THIS PART (THE DENOMINATOR) TO SATISFY THIS ASSUMPTION.
utt_0078 utt 439.80 448.76 -X AFTER THESE TWO OPERATIONS, THE COMPLICATED FORMULA OF THE POINT-TO-HYPERPLANE DISTANCE CAN
utt_0079 utt 448.76 455.52 -X BE SIMPLIFIED AS THE ABSOLUTE INNER PRODUCT BETWEEN THE DATA OBJECT O AND THE QUERY Q.
utt_0080 utt 456.60 467.13 -X AND THEN THE POINT-TO-HYPERPLANE NN SEARCH CAN BE ALSO CONSIDERED AS A POINT-TO-POINT MINIMUM ABSOLUTE INNER PRODUCT SEARCH PROBLEM. HERE ARE THE FORMULA.
utt_0082 utt 468.82 472.76 -X SO WE.. SO AFTER THE DISTANCE SIMPLIFICATION,
utt_0083 utt 472.76 478.04 -X WE PROPOSE A TWO-STEP ASYMMETRIC TRANSFORMATION FOR POINT-TO-HYPERPLANE NN SEARCH.
utt_0084 utt 478.62 488.89 -X IN STEP one, WE PROPOSE TWO OBJECT EMBEDDING FUNCTIONS F AND G FOR THE DATA POINT O AND THE QUERY Q, RESPECTIVELY. HERE ARE THE FORMULAS.
utt_0086 utt 488.89 493.66 -X AFTER THIS STEP, WE CAN SEE THAT THE INNER PRODUCT BETWEEN O’
utt_0087 utt 493.69 500.03 -X AND Q’ IS EQUAL TO THE SQUARE OF THE ABSOLUTE INNER PRODUCT BETWEEN O AND Q.
utt_0088 utt 500.38 505.88 -X SO WITH THIS STEP, WE CAN REMOVE THE IMPACT OF THE ABSOLUTE VALUE OPERATOR.
utt_0089 utt 507.26 514.49 -X IN THE STEP three.. IN THE STEP two, WE PROPOSE TWO HYPERSPHERE TRANSFORMATIONS P AND Q
utt_0090 utt 514.71 521.31 -X FOR THE DATA POINT O' AND THE QUERY Q'. HERE ARE THE FORMULAS.
utt_0091 utt 522.68 531.61 -X AFTER THIS STEP, WE CAN SEE THAT THE Ltwo-NORM OF THE P(O’) IS EQUAL TO THE Ltwo-NORM OF THE Q(Q’),
utt_0092 utt 532.18 535.16 -X AND IS EQUAL TO A FIXED CONSTANT.
utt_0093 utt 535.74 540.22 -X SO WITH THIS STEP, WE CAN REMOVE THE UNIT HYPERSPHERE ASSUMPTION,
utt_0094 utt 540.22 549.50 -X BECAUSE ALL THE Ltwo-NORM OF THE DATA POINTS P(O') FOR NOW ARE EQUAL TO EACH OTHER.
utt_0095 utt 551.13 558.33 -X SO AFTER THE.. SO WITH THE TWO-STEP ASYMMETRIC TRANSFORMATION, WE CAN CONVERT THE CHALLENGING
utt_0096 utt 558.55 565.09 -X POINT-TO-HYPERPLANE NN SEARCH PROBLEM INTO THE CLASSIC POINT-TO-POINT NN SEARCH PROBLEM.
utt_0097 utt 565.95 567.84 -X HERE ARE THE INDUCTION DETAILS.
utt_0098 utt 568.51 578.65 -X HOWEVER, OUR OBJECT EMBEDDING FUNCTIONS F AND G WILL INCREASE THE DATA DIMENSION FROM D TO O(D^two),
utt_0099 utt 579.74 583.04 -X SO IT WILL INCREASE THE QUERY TIME COMPLEXITY.
utt_0100 utt 583.64 592.67 -X TO ALLEVIATE THIS PROBLEM, WE PROPOSE TO APPROXIMATE THE OBJECT EMBEDDING FUNCTIONS F AND G WITH RANDOMIZED SAMPLING,
utt_0102 utt 592.67 600.64 -X SO THAT THE DATA DIMENSION CAN BE REDUCED FROM THE O(D^two) TO AN ACCEPTABLE LEVEL.
utt_0103 utt 600.64 602.43 -X WE FORMALLY DEMONSTRATE THESE
utt_0104 utt 603.03 609.92 -X WITH LEMMA three point one. HOWEVER, DUE TO THE TIME LIMIT, WE OMIT THE DETAILS HERE.
utt_0105 utt 609.98 615.42 -X SO.. WITH THE TWO-STEP ASYMMETRIC TRANSFORMATION, WE PROPOSE THE FIRST PROVABLE
utt_0106 utt 615.83 622.59 -X METHOD CALLED NEAREST HYPERPLANE HASHING (OR SIMPLY CALLED NH) FOR THE POINT-TO-HYPERPLANE
utt_0107 utt 623.61 626.46 -X NN SEARCH BEYOND THE UNIT HYPERSPHERE.
utt_0109 utt 632.38 634.75 -X IT CAN.. EH.. AS YOU CAN SEE,
utt_0110 utt 634.97 639.23 -X THE HASH FUNCTION H_{\MATHCAL{N}} CAN BE CONSIDERED AS A HYBRID FUNCTION
utt_0111 utt 639.32 647.97 -X OF THE RANDOM PROJECTION LSH FUNCTION H_{\BM{A},B} AND THE TWO-STEP ASYMMETRIC TRANSFORMATION.
utt_0112 utt 648.73 656.80 -X A BASIC FINDING IN THIS PAPER IS THAT WE FORMALLY DEMONSTRATE THAT THE NH HASH FAMILY OF THE HASH
utt_0114 utt 664.67 666.91 -X THE NH SCHEME IS QUITE STRAIGHTFORWARD.
utt_0115 utt 666.91 680.70 -X IT CAN BE CONSIDERED AS THE NH HASH FAMILY COMBINED WITH A STATE-OF-THE-ART POINT-TO-POINT NN SEARCH SCHEME CALLED LCCS-LSH WHICH WE PUBLISHED IN SIGMOD two thousand and twenty.
utt_0117 utt 681.63 692.19 -X WE FURTHER ANALYSE THE PROPERTY OF NH, AND WE FORMALLY DEMONSTRATE THAT NH ENJOYS (A) QUALITY GUARANTEE FOR THE POINT-TO-HYPERPLANE NN SEARCH.
utt_0119 utt 692.19 698.24 -X IT (MERELY) HAS SUBLINEAR QUERY TIME AND SUBQUADRATIC SPACE FOR THIS CHALLENGING PROBLEM.
utt_0120 utt 699.52 704.93 -X HOWEVER, SIMILAR TO THE EXISTING WORK LIKE EH, BH, AND MH,
utt_0121 utt 705.57 714.95 -X IF THE POINT-TO-HYPERPLANE DISTANCE IS CLOSE TO zero, THE NH MAY REQUIRE NEARLY LINEAR QUERY TIME.
utt_0122 utt 714.95 722.95 -X TO FIX THIS PROBLEM, WE DEVELOP ANOTHER HYPERSPHERE TRANSFORMATION Q’ FOR THE Q’
utt_0123 utt 723.42 734.79 -X WE SHOW HERE, SO WE CAN ALSO CONVERT THE POINT-TO-HYPERPLANE NN SEARCH PROBLEM INTO ANOTHER CLASSIC POINT-TO-POINT FURTHEST NEIGHBOR SEARCH (FNS) PROBLEM.
utt_0125 utt 734.79 739.23 -X AND THEN, WE PROPOSE FH FOR POINT-TO-HYPERPLANE NN SEARCH.
utt_0126 utt 740.73 751.62 -X SIMILAR TO NH, WE ALSO DESIGN AN FH HASH FAMILY AND SHOW THAT IT IS LOCALITY-SENSITIVE TO THE POINT-TO-HYPERPLANE DISTANCE.
utt_0128 utt 753.09 755.39 -X FH IS ALSO QUITE STRAIGHTFORWARD.
utt_0129 utt 755.90 765.28 -X YOU CAN SIMPLY CONSIDER IT AS THE FH HASH FAMILY COMBINED WITH A STATE-OF-THE-ART FURTHEST NEIGHBOR
utt_0130 utt 765.28 771.20 -X SEARCH METHOD CALLED REVERSE QALSH (RQALSH), WHICH WE PUBLISHED IN TKDE two thousand and seventeen.
utt_0131 utt 771.49 783.01 -X EH.. WE ALSO ANALYSE THE PROPERTY OF THE FH, AND SHOW THAT SIMILAR TO THE NH,
utt_0132 utt 783.55 789.48 -X WE ALSO SHOW THAT IT ENJOYS A QUALITY GUARANTEE FOR POINT-TO-HYPERPLANE NN SEARCH.
utt_0133 utt 789.86 794.12 -X EVEN THOUGH ITS TIME COMPLEXITY IS WORSE THAN NH,
utt_0134 utt 794.24 800.32 -X BUT IT HAS A BETTER PRACTICAL PERFORMANCE BASED ON OUR EXPERIMENTAL RESULTS.
utt_0135 utt 801.73 812.13 -X SO IN THE EXPERIMENT PART, WE WOULD STUDY THE PERFORMANCE OF NH AND FH OVER FIVE REAL-LIFE DATASETS ACROSS DIFFERENT DOMAINS.
utt_0137 utt 813.38 819.75 -X AND THEN FOR EACH DATASET, WE WOULD GENERATE one,zero HYPERPLANE QUERIES FOR EVALUATION.
utt_0138 utt 819.84 826.18 -X HERE WE CONSIDER TWO CASES: (THE) UN-NORMALIZED CASE AND THE NORMALIZED CASE.
utt_0139 utt 827.07 832.45 -X HERE WE WOULD LIKE TO CLAIM THAT ALL THE DATASETS WE SELECTED ARE UN-NORMALIZED.
utt_0140 utt 832.90 847.46 -X HERE WE CONSIDER THE NORMALIZED CASE BECAUSE MANY STATE-OF-THE-ART METHODS ARE GOOD AT THIS NORMALIZED CASE, SO WE AIM TO MAKE A COMPARISON WITH THEM IN A FAIR SETTING.
utt_0142 utt 848.58 858.02 -X AND THEN WE SELECT FOUR COMPETITORS, INCLUDING TWO STATE-OF-THE-ART METHODS BH AND MH
utt_0143 utt 858.14 862.24 -X AND TWO TRIVIAL BASELINES WE CALLED RANDOM-SCAN AND SORTED-SCAN.
utt_0144 utt 862.43 870.44 -X FOR THE SORTED-SCAN, WE WILL FIRST SORT ALL THE DATA POINTS BASED ON THEIR Ltwo-NORMS IN ASCENDING
utt_0145 utt 870.44 880.07 -X ORDER AND THEN WE WILL SCAN THE DATA POINTS FROM THE LOWEST Ltwo-NORM TO THE HIGHEST Ltwo-NORM.
utt_0146 utt 882.11 885.93 -X TO STUDY THE QUERY PERFORMANCE, WE CONSIDER THE RECALL,
utt_0147 utt 885.93 891.78 -X FRACTION, AND RUNNING TIME TO STUDY THE ACCURACY AND EFFICIENCY TRADE-OFF.
utt_0148 utt 891.78 897.25 -X WE ALSO CONSIDER THE INDEX SIZE AND INDEXING TIME TO STUDY THE INDEXING PERFORMANCE.
utt_0149 utt 898.50 903.43 -X IN THE FIRST EXPERIMENT, WE FIRST STUDY THE QUERY PERFORMANCE.
utt_0150 utt 904.48 909.93 -X HERE WE SHOW THE QUERY TIME-RECALL CURVES AND THE FRACTION-RECALL CURVES IN THIS FIGURE.
utt_0151 utt 910.50 917.16 -X HERE THE RED, BLUE, GREEN LINES ARE (REPRESENTED AS) THE METHODS WE PROPOSED,
utt_0152 utt 917.16 921.22 -X AND THE REST FOUR LINES ARE (REPRESENTED AS) THE COMPETITORS.
utt_0153 utt 921.22 928.71 -X AS YOU CAN SEE, THE METHODS WE PROPOSED, ESPECIALLY FH, ARE AROUND ABOUT three TO
utt_0154 utt 930.82 936.39 -X MAYBE one hundred TIMES FASTER THAN THE BEST COMPETITORS EXCEPT FOR THE DATASET MSONG.
utt_0155 utt 936.58 943.72 -X IN THE DATASET MSONG, THE PERFORMANCE OF SORTED-SCAN IS COMPARABLE TO (THAT OF) FH.
utt_0156 utt 943.72 950.76 -X HOWEVER, THE PERFORMANCE OF SORTED-SCAN IS NOT VERY STABLE. FOR EXAMPLE, IN THE DATASETS YELP,
utt_0157 utt 950.76 958.38 -X MUSIC AND GLOVE, THE PERFORMANCE OF SORTED-SCAN IS THE WORST AMONG ALL THE METHODS WE SHOWED HERE.
utt_0158 utt 959.49 967.48 -X SO WE COULD CLAIM THAT FH AND NH WE PROPOSED IS MORE EFFICIENT AND HAS A BETTER TRADE-OFF BETWEEN
utt_0159 utt 968.16 972.71 -X ACCURACY AND EFFICIENCY THAN OTHER COMPETITORS.
utt_0160 utt 972.71 976.52 -X IN THE SECOND EXPERIMENTS, WE STUDY THE INDEXING PERFORMANCE.
utt_0161 utt 976.55 984.52 -X WE PLOT THE QUERY TIME-INDEX SIZE CURVES AND QUERY TIME-INDEXING TIME CURVES HERE.
utt_0162 utt 985.96 994.20 -X AS YOU CAN SEE, THE DATA POINTS FROM FH IS CLOSER THAN THE DATA POINTS FROM OTHER METHODS, SO WE CAN
utt_0163 utt 998.60 1004.07 -X SEE THAT THE METHODS WE PROPOSED, E.G., FH AND NH,
utt_0164 utt 1005.60 1010.50 -X HAVE BETTER TRADE-OFF BETWEEN THE QUERY TIME AND THE INDEXING PERFORMANCE.
utt_0165 utt 1011.59 1016.97 -X FINALLY, IN THE THIRD EXPERIMENTS, WE ALSO SHOW THE RESULTS ON NORMALIZED DATA.
utt_0166 utt 1018.34 1024.81 -X HOWEVER, AS YOU CAN SEE, EVEN ON THE NORMALIZED DATA, THE PERFORMANCE OF
utt_0167 utt 1025.76 1031.50 -X FH AND NH (ARE) STILL BETTER THAN (THE PERFORMANCE OF) BH AND MH.
utt_0168 utt 1032.16 1043.79 -X FOR EXAMPLE, THE CURVES FOR THE FH AND NH ARE LOWER THAN THE CURVES OF BH AND MH.
utt_0169 utt 1043.79 1045.13 -X SO, WE CAN CLAIM THAT
utt_0170 utt 1045.38 1054.15 -X THE METHODS FH AND NH WE PROPOSED OUTPERFORM THE TWO STATE-OF-THE-ART METHODS BH AND MH.
utt_0171 utt 1055.21 1058.35 -X FINALLY, WE MAKE A CONCLUSION FOR OUR PAPER.
utt_0172 utt 1058.35 1065.35 -X WE INVESTIGATE A FUNDAMENTAL YET VERY CHALLENGING PROBLEM OF POINT-TO-HYPERPLANE NN SEARCH BEYOND THE UNIT HYPERSPHERE.
utt_0174 utt 1065.57 1077.29 -X AND THEN, WE INTRODUCE A NOVEL TWO-STEP ASYMMETRIC TRANSFORMATION TO CONVERT THE POINT-TO-HYPERPLANE NEAREST NEIGHBOR SEARCH PROBLEM INTO THE CLASSIC NNS OR FNS PROBLEM.
utt_0176 utt 1077.67 1081.96 -X AND THEN, WE DEVELOP TWO HYPERPLANE HASHING SCHEMES
utt_0177 utt 1082.15 1086.41 -X NH AND FH AND DO SOME THEORETICAL ANALYSIS FOR THEM.
utt_0178 utt 1088.04 1097.67 -X FINALLY, WE USE EXTENSIVE EXPERIMENTS OVER FIVE REAL-LIFE DATASETS TO DEMONSTRATE THE SUPERIOR PERFORMANCE OF NH AND FH.
utt_0180 utt 1098.73 1102.73 -4.0246 I THINK THAT IS ALL FOR MY PRESENTATION. THANK YOU FOR YOUR ATTENTION!
