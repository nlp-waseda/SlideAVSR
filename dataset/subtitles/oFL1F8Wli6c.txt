utt_0000 utt 0.62 3.54 -X HELLO EVERYONE MY NAME IS BO IRAN
utt_0001 utt 3.92 7.06 -X A PHD CANDIDATE FROM THE UNIVERSITY OF QUEENSLAND
utt_0003 utt 7.31 16.88 -X TODAY I'M GOING TO PRESENT OUR WORK ABOUT DYNAMIC STRUCTURAL CLUSTERING ON GRAPHS THIS WORK IS COMPLETED TOGETHER WITH JIN HAO GANG HAO
utt_0008 utt 17.16 22.72 -X AND ANTONI WORKS THERE ARE MANY VARIANTS OF GRAPH CLUSTERING ALGORITHMS
utt_0010 utt 22.83 29.09 -X SUCH AS CORRELATION CLUSTERING MODULARITY CLUSTERING STRUCTURAL CLUSTERING AND ETC
utt_0013 utt 30.80 36.46 -X AN INTERESTING FEATURE OF STRUCTURAL CLUSTERING IS THAT IN THE CLUSTERING RESULT
utt_0016 utt 36.59 39.12 -X CLUSTERS MAY OVERLAP WITH EACH OTHER
utt_0017 utt 39.28 42.69 -X AND AS A RESULT VERTICES MAY PLAY DIFFERENT ROLES
utt_0019 utt 42.99 46.39 -X SOME ARE CARS HOPS NOISES AND ETC
utt_0020 utt 48.08 61.55 -X IN A PROTEIN PRINTING NETWORK STRUCTURAL CLUSTERING CAN BE USED TO IDENTIFY FUNCTIONAL MODELS AND IT CAN ALSO BE USED TO DETECT COMMUNITIES IN SOCIAL NETWORKS AND SINCE
utt_0025 utt 61.55 64.66 -X SOME VERTICES MAY BE NOISES IN THE GRAPH
utt_0026 utt 64.91 72.40 -X IT CAN ALSO BE UTILIZED TO DETECT VOICE STRUCTURAL CLUSTERING WORKS ON AN UNDIRECTED GRAPH G
utt_0029 utt 73.04 79.54 -X WHERE N IS THE NUMBER OF VERTICES AND M IS THE NUMBER OF EDGES WE USE
utt_0031 utt 79.73 93.73 -X UE TO DENOTE AN EDGE BETWEEN VERTEX U AND WE THE U AND WE ARE CALLED NEIGHBORS TO EACH OTHER AND WE DEFINE THE NEIGHBORHOOD AND U OF OUR VERTICES U TO BE A SET THAT CONTAINS
utt_0038 utt 93.73 96.34 -X ALL USED NEIGHBORS AND U ITSELF
utt_0039 utt 96.94 100.27 -X HERE IS AN EXAMPLE THE NEIGHBORHOOD OF
utt_0040 utt 100.72 101.49 -X VERTEX Vfour
utt_0041 utt 101.58 103.47 -X CONTAINS VERTEX Vone TO Vfive
utt_0042 utt 104.59 106.77 -X AND THE NEIGHBORHOOD OF VERTEX Vnine
utt_0043 utt 107.09 108.56 -X CONTAINS VERTICES Vsix
utt_0044 utt 109.77 110.71 -X TO Vtwelve
utt_0045 utt 112.94 125.97 -X BY INTUITION IF TWO VERTICES SHARE A LARGE NUMBER OF COMMON NEIGHBORS THEY TEND TO BE SIMILAR TO EACH OTHER BUT HOW CAN WE MEASURE HOW TWO VERTICES ARE SIMILAR TO EACH OTHER
utt_0052 utt 128.40 139.27 -X WE USE STRUCTURAL SIMILARITY SIGMA UE IN STRUCTURAL CLUSTERING HERE ARE THREE POPULAR DEFINITIONS OF STRUCTURAL SIMILARITY IN LITERATURES
utt_0056 utt 140.66 144.85 -X YOU MAY NOTICE THAT NO MATTER WHICH FORM OF DEFINITION WE ADOPT
utt_0058 utt 145.17 148.76 -X COMPUTING A STRUCTURAL SIMILARITY OR REQUIRES US
utt_0060 utt 148.82 152.50 -X TO COMPUTE THE SIZE OF INTERSECTION BETWEEN TWO NEIGHBORHOODS
utt_0062 utt 153.49 156.63 -X AND WHEN THE SIZE OF THE NEIGHBORHOOD IS LARGE
utt_0064 utt 157.14 165.59 -X THE COMPUTATION TIME CAN GOES TO ON WORST CASE TIME THERE ARE TWO PARAMETERS IN STRUCTURAL CLUSTERING
utt_0068 utt 165.78 168.44 -X ONE IS EPSILON AND THE OTHER ONE IS MU
utt_0069 utt 169.94 173.56 -X WE CAN LABEL AN EDGE UV AS SIMILAR
utt_0070 utt 173.65 177.75 -X IF AND ONLY IF SIGMA UV IS NO SMALLER THAN EPSILON
utt_0072 utt 178.13 181.11 -X WE CALL AS UV A SIMILAR EDGE IN SHORT
utt_0073 utt 182.03 189.92 -X A VERTEX U IS CALLED A CORE VERTEX IF AND ONLY A FEW HAS AT LEAST NEW SIMILAR EDGES INCIDENT TO IT
utt_0077 utt 191.02 198.32 -X HERE IS A RUNNING EXAMPLE OF STRUCTURAL CLUSTERING WITH EPSILON SET TO one OVER three AND MU SET TO three.
utt_0081 utt 200.59 205.51 -X FOR VERTEX Vseven AND WE NINE THE INTERSECTION OF THE NEIGHBORHOOD CONTAINS
utt_0084 utt 206.51 208.31 -X VERTEX Vsix WITH seven AND WE NINE
utt_0085 utt 209.04 213.81 -X AND THE UNION OF OF THESE TWO NEIGHBORHOOD CONTAINS VERTICES Vsix TO Vtwelve
utt_0088 utt 216.56 219.73 -X SO SIGMA Vseven WE NINE EQUALS THREE OVER SEVEN
utt_0090 utt 219.92 224.73 -X AND IS LARGER THAN ONE OVER THREE SO IT IS LABELED AS SIMILAR
utt_0092 utt 225.27 227.69 -X THE SAME IS FOR ADD Vnine RETURN
utt_0093 utt 229.04 234.37 -X IN THIS GRAPH I MARK ALL THE CORE VERTICES AND SIMILAR EDGES WITH COLOR
utt_0096 utt 235.31 240.25 -X TO CONSTRUCT A STRUCTURAL CLUSTER WE START WITH A CALL VERTEX
utt_0098 utt 240.37 245.97 -X FOR EXAMPLE WITH THREE HERE AND WE INCLUDE ALL THE VERTICES SIMILAR TO Vthree
utt_0100 utt 246.26 260.21 -X INTO THE SAME CLUSTER NAMELY WE WANT WE TWO AND WE FALL SINCE Vfour ITSELF IS ANOTHER CALL VERTEX WE THEN INCLUDE ALL THE VERTICES SIMILAR TO WE FALL INTO THIS CLUSTER
utt_0106 utt 260.21 271.69 -X THAT IS TO SAY WE FIND AND WE FIVE IS NOT A CALL VORTEX SO THE PROCESS TERMINATES AND WE OBTAIN ONE STRUCTURAL CLUSTER
utt_0110 utt 272.88 278.61 -X FOLLOW SIMILAR PROCESS WE CAN OBTAIN ANOTHER STRUCTURAL CLUSTER IN THIS GRAPH
utt_0112 utt 279.83 282.42 -X HERE YOU MAY NOTICE THAT VERTEX Vfive
utt_0113 utt 282.58 284.49 -X BELONGS TO BOTH CLUSTERS
utt_0114 utt 284.82 289.38 -X THAT MAKES IT A HUB VERTEX THAT BRIDGES THESE TWO CLUSTERS
utt_0116 utt 292.08 294.66 -X AND VERTEX Vten Veleven AND Vtwelve BELONGS TO NODE CLUSTER
utt_0118 utt 295.03 297.59 -X THAT MAKES THE NOISES IN THIS GRAPH
utt_0119 utt 299.22 301.53 -X FROM THE ABOVE CONSTRUCTION PROCESS IT
utt_0120 utt 301.91 302.97 -X CAN BE SEEN THAT
utt_0121 utt 303.03 313.30 -X GIVEN A VALID EDGE LABELING THE STRUCTURAL CLUSTERING RESULT CAN BE OUTPUT IN O AND PLUS AND TIME WITH WITH TRAVERSING THE GRAPH ONCE
utt_0126 utt 314.32 322.14 -X SO THE BOTTLENECK OF THE STATE-OF-THE-ART ALGORITHMS ALL LIES IN COMPUTING A VALID ACTIVELY
utt_0129 utt 323.60 328.49 -X COMPUTE A VALID EDGE LABELING THE STATE-OF-THE-ART ALGORITHMS
utt_0131 utt 330.16 333.11 -X NEED OM TO THE POWER OF one point five WORST CASE RUNNING TIME
utt_0133 utt 333.14 336.78 -X AND THEY REQUIRE OMN PLUS M SPACE CONSUMPTION
utt_0135 utt 338.10 341.40 -X HOWEVER WHEN IT COMES TO THE DYNAMIC SCENARIO
utt_0137 utt 341.81 349.40 -X MAINTAINING A VALID EDGE LABELING BECOMES CHALLENGING TO SEE THIS HERE IS THE ABOUT EXAMPLE
utt_0141 utt 350.23 353.56 -X IF WE DELETE ADD Vsix WE KNIFE FROM THIS GRAPH
utt_0143 utt 354.39 362.46 -X THE EDGE LABELING STATUS AND THE CLUSTERING RESULT MAY CHANGE SIGNIFICANTLY WITH THE DELETION OF ONE SINGLE EDGE
utt_0148 utt 364.56 368.66 -X HERE IS AN EXAMPLE AFTER DELETING EDGE Vsix Vnine
utt_0150 utt 369.52 376.31 -X SIMILARITY BETWEEN Vsix Vnine AND THEIR NEIGHBORHOODS ALL CHANGES SO WE CALL Vsix Vnine
utt_0153 utt 376.95 380.89 -X AN AFFECTING UPDATE FOR THE EDGES INCIDENT TO Vsix
utt_0155 utt 381.11 386.90 -X OR WE NINE AND WE SAY THESE EDGES ARE AFFECTED BY Vsix Vnine
utt_0157 utt 388.40 390.04 -X TAKE Vseven WINDnine FOR EXAMPLE
utt_0158 utt 392.02 394.02 -X AFTER DELETING Vsix Vnine SIGMA Vseven WE nine
utt_0159 utt 395.99 397.62 -X BECOMES two OVER seven
utt_0160 utt 398.26 400.54 -X AND IT IS SMALLER THAN one OVER three NOW
utt_0161 utt 401.65 403.87 -X SO THE LABEL OF AT Vseven WAVEnine FLIPS
utt_0162 utt 404.69 407.91 -X FROM SIMILAR TO DISSIMILAR AFTER THE DELETION
utt_0164 utt 409.24 416.44 -X IN FACT ALL THE EDGES I MARKED IN COLOR HERE HAVE THEIR LABELS FLEET AFTER THE DELETION
utt_0168 utt 417.53 431.67 -X SO IF THE NEIGHBORHOOD SIZE OF Vnine IS LARGE TO MAINTAIN THE LABELS OF THESE AFFECTED EDGES MAY CAUSE O AND WORST CASE TIME COST WE'LL SUMMARIZE THE PROBLEMS THAT THE STATE OF
utt_0174 utt 431.67 435.64 -X THE ART ALGORITHM FACE AS THE CURSE OF NEIGHBORHOOD SCANNING
utt_0176 utt 436.53 450.14 -X AS I MENTIONED ABOUT COMPUTE STRUCTURAL SIMILARITY BETWEEN TWO TWO VERTICES MAY TAKE OVER AND WORST CASE TIME COST AND WORSE STILL EVEN IF WE TREAT THE COMPUTATION AS FREE
utt_0182 utt 450.81 456.17 -X IT MAY STILL TAKE OVEN TIME TO MAINTAIN THE LABELS OF THE AFFECTED EDGES
utt_0185 utt 457.49 466.27 -X TO OVERCOME THE OEM BARRIER WE INTRODUCE REAL APPROXIMATE NOTION THAT HAS ALREADY BEEN USED IN OTHER CLUSTERING PROBLEMS
utt_0188 utt 467.51 470.39 -X GIVEN A PARAMETER EPSILON AND RHO
utt_0189 utt 470.58 478.60 -X FOR AN EDGE UV WE DEFINE ITS VALID LABEL WITH RESPECT TO ROW APPROXIMATE NOTION IN THE FOLLOWING MINUS
utt_0193 utt 480.92 492.47 -X IF SIGMA UV IS NO SMALLER THAN ONE PLUS ROW TIMES EPSILON IT MEANS THAT SIGMA UV IS FAR LARGER THAN EPSILON UE MUST BE LABELED AS SIMILAR
utt_0198 utt 494.14 498.17 -X AND IF SIGMA U V IS SMALLER THAN ONE MINUS RHO EPSILON
utt_0200 utt 498.62 502.56 -X IT MEANS THAT SIGMA U V IS FAR SMALLER THAN EPSILON
utt_0202 utt 503.48 506.17 -X THE UV MUST BE LABELED AS DISSIMILAR
utt_0203 utt 508.09 511.48 -X OTHERWISE IF SIGMA UV LASTS SOMEWHERE BETWEEN
utt_0205 utt 511.96 519.29 -X IT MEANS THAT SIGMA UV IS VERY CLOSE TO ITS EPSILON IT FALLS INTO THE DON'T CARE CASE
utt_0209 utt 519.96 532.38 -X IT CAN EITHER BE LABELED AS SIMILAR OR DISSIMILAR THEY ARE ALL CORRECT WHAT'S THE BENEFIT OF THE RAW APPROXIMATE NOTION THE FIRST ONE IS THAT
utt_0214 utt 532.38 544.38 -X WE DON'T HAVE TO FLIP THE LABELS OF THE AFFECTED EDGES AS FREQUENTLY AS BEFORE THE SECOND ONE IS THAT WE CAN USE APPROXIMATE SIMILARITY INSTEAD OF THE EXACT
utt_0220 utt 544.66 546.01 -X ONE IN OUR PROBLEM
utt_0221 utt 547.80 552.57 -X HERE IS AN EXAMPLE WE SET ROW EQUALS ONE OVER SEVEN
utt_0223 utt 553.43 561.50 -X ALTHOUGH SIGMA V SEVEN WE KNOW CHANGES FROM THREE OVER SEVEN TO TWO OVER SEVEN AFTER THE DELETION OF AT WE SIX WE NINE
utt_0227 utt 561.88 565.85 -X IT IS STILL NO SMALLER THAN ONE MINUS ZERO TIMES EPSILON
utt_0229 utt 566.20 570.33 -X SO IT CAN STILL BE LABELED AS SIMILAR AFTER THE DELETION
utt_0231 utt 571.03 573.79 -X IN FACT WITH LOW APPROXIMATE NOTION
utt_0232 utt 574.26 576.40 -X THE DELETION OF Vsix Vnine AFFECTS
utt_0233 utt 578.04 584.72 -X NO EDGES LABEL SO WE CAN SAVE THE TIME TO MAINTAIN THE LABELS OF THE AFFECTED EDGES
utt_0236 utt 586.07 589.44 -X FOR THE APPROXIMATE SIMILARITY TAILED SIGMA UV
utt_0238 utt 589.88 592.86 -X WE CAN COMPUTE IT RESPONDED ARROW zero point five
utt_0239 utt 594.07 597.63 -X TIMES zero EPSILON WITH PROBABILITY one MINUS THETA
utt_0241 utt 597.72 600.13 -X IN O LOG N TO THE POWER OF two TIME
utt_0242 utt 601.69 604.99 -X AND ENTER THIS APPROXIMATE SIMILARITY
utt_0243 utt 605.79 612.80 -X AND H U V IS LABELED AS SIMILAR IF AND ONLY IF TILT SIGMA UV IS NO SMALLER THAN EPSILON
utt_0246 utt 614.04 626.62 -X ALTHOUGH WE HAVE LOWER APPROXIMATE NOTION THE PROBLEM IS FAR FROM SOAP HERE THE REASON IS THAT WE STILL HAVE TO MAINTAIN THE APPROXIMATE SIMILARITY BETWEEN EACH PAIR OF VERTICES
utt_0252 utt 626.78 630.97 -X TO MAINTAIN A VALID EDGE LABELING IN THE DYNAMIC SCENARIO
utt_0254 utt 631.35 634.65 -X WHICH WON'T HELP US TO BREAK THE OEM BARRIER
utt_0256 utt 636.19 642.75 -X WE STILL NEED TO TAKE MORE ADVANTAGE OF THE DON'T CARE CASE IN THE LOW APPROXIMATE NOTION
utt_0260 utt 643.32 645.89 -X WE DEFINE UPDATE AFFORDABILITY HERE
utt_0261 utt 646.87 654.93 -X FOR AN EDGY WAY WITH SIGMA UH EQUALS A OVER B HERE A EQUALS THE SIZE OF INTERSECTION OF TWO NEIGHBORHOODS
utt_0264 utt 654.94 658.73 -X AND B EQUALS THE SIZE OF THE UNION OF THESE TWO NEIGHBORHOODS
utt_0266 utt 659.55 672.78 -X IF WE INSERT AN EDGE UW THERE ARE TWO CASES THE FIRST ONE IS IF W IS ALREADY IN THE NEIGHBORHOOD OF WE THEN THE SIZE OF THE UNION OF THESE TWO NEIGHBORHOODS
utt_0272 utt 672.78 682.24 -X WON'T CHANGE AND THE SIZE OF THE INTERSECTION IS INCREASED BY ONE SO SIGMA UE IS INCREASED TO A PLUS ONE OVER B
utt_0276 utt 683.55 686.94 -X AND IF W IS NOT IN THE NEIGHBORHOOD OF V
utt_0277 utt 687.74 696.58 -X THEN THE SIZE OF THEIR INTERSECTION STAYS THE SAME AND THE SIZE OF THEIR UNION IS INCREASED BY ONE SO SIGMA UE
utt_0281 utt 696.70 699.74 -X IS DECREASED TO A OVER B PLUS ONE
utt_0282 utt 700.48 707.26 -X AND THE SAME AS FOR DELETE DELETE AND ADD UW WE CAN PROVE THAT AN ADD UI
utt_0285 utt 707.39 712.00 -X CAN AFFORD AT LEAST K AFFECTING UPDATES BEFORE ITS LABEL FLIPS
utt_0287 utt 712.64 724.22 -X IT MEANS THAT IF UV IS LABELED AS SIMILAR AT THIS MOMENT THEN WITHIN THE NEXT K AFFECTING UPDATES WE DON'T HAVE TO COMPUTE THE APPROXIMATE SIMILARITY
utt_0292 utt 724.25 730.90 -X OR MAINTAIN THIS LABEL IT CAN SAFELY STAY SIMILAR UNTIL THE K PLUS ONES UPDATE
utt_0295 utt 731.77 738.96 -X UPON THE K PLUS ONE'S AFFECTING UPDATE WE NEED TO CALCULATE TAILED SIGMA UE AND MAINTAIN ITS LABEL
utt_0298 utt 740.00 745.41 -X NOW THE QUESTION BECOMES HOW CAN WE CAPTURE THE K PLUS ONE'S AFFECTING UPDATES
utt_0301 utt 747.00 750.88 -X A NAIVE SOLUTION IS TO MAINTAIN COUNTERS ON EACH EDGE
utt_0303 utt 750.94 753.82 -X TO COUNT THE NUMBER OF AFFECTING UPDATES
utt_0304 utt 754.65 761.70 -X HOWEVER SINCE A COUNTER CAN BE AFFECTED BY UPDATES THAT INVOLVES OTHER OFFICE ENDPOINTS
utt_0307 utt 761.76 763.99 -X WE NEED TO MAINTAIN THESE COUNTERS
utt_0308 utt 764.16 765.09 -X INDIVIDUALLY
utt_0309 utt 766.21 772.61 -X FOR EXAMPLE IF AN AFFECTING UPDATE THAT INVOLVES EU COMES WE NEED TO INCREASE Cone
utt_0311 utt 773.63 775.97 -X Ctwo Cthree AND Cfour ALL BY ONE
utt_0312 utt 776.80 780.32 -X WE NOTICE THAT SUCH AN AFFECTING UPDATE
utt_0313 utt 780.41 782.85 -X AFFECTS THE VALUE OF Cone Ctwo Cthree AND Cfour
utt_0314 utt 784.93 793.52 -X EQUALLY SO OUR GOAL IS TO USE ONE SINGLE COUNTER TO COUNT THE AFFECTING UPDATES THAT INVOLVES YOU
utt_0317 utt 795.20 809.70 -X TO ACHIEVE THIS GOAL WE USE THE TECHNIQUE CALLED DISTRIBUTED TRACKING HERE IS A RUNNING EXAMPLE OF THE BASIC IDEA HERE WE SET THE UPDATE AVAILABILITY K EQUALS eight
utt_0323 utt 810.59 821.51 -X AND EACH ENDPOINT HAS A COUNTER CU AND CV INITIALIZED AS ZERO AND EACH COUNTER IS ASSIGNED A BUDGET LAMBDA EQUALS K OVER FOUR
utt_0328 utt 821.73 831.87 -X HERE LAMBDA EQUALS TWO AND A COORDINATOR ON THE EDGE WILL RECEIVE ONE REPORT WHENEVER A COUNTER INCREASES BY LAMBDA
utt_0332 utt 833.09 836.66 -X FIRST EVERYTHING IS INITIALIZED AT ZERO
utt_0333 utt 837.76 847.67 -X ONE OF AN AFFECTING UPDATE INVOLVES YOU COMES CU IS INCREASED BY one. AND IF ANOTHER AFFECTING UPDATE INVOLVES U COMES
utt_0337 utt 847.74 860.63 -X CU BECOMES two AND SINCE CU HAS INCREASED BY two THE COORDINATOR RECEIVES ONE REPORT AND IF A FORK AFFECTING UPDATE INVOLVES WII CV
utt_0341 utt 860.63 863.62 -X IS INCREASED ALSO BY ONE THEN
utt_0342 utt 863.74 871.78 -X AFTER ANOTHER TWO AFFECTING UPDATES INVOLVES YOU THE COORDINATOR HAS RECEIVED TWO REPORTS IN TOTAL
utt_0346 utt 872.32 876.61 -X SO WE SAY HERE IS THE END OF ONE ROUND
utt_0347 utt 877.12 880.68 -X AT THE END OF THIS ROUND WE CALCULATE K PRIME
utt_0349 utt 882.82 888.53 -X AS K MINUS C U MINUS CV HERE K PRIME EQUALS THREE AND THEN WE SIDE
utt_0352 utt 888.67 893.06 -X UH RESET EVERYTHING TO ZERO AGAIN AND WE START A NEW ROUND
utt_0354 utt 893.50 895.88 -X A NEURON WITH K PRIME
utt_0355 utt 897.02 900.68 -X THIS PROCESS TERMINATES WHEN K PRIME EQUALS ZERO
utt_0357 utt 902.43 915.57 -X AS A RESULT ALL EDGES INCIDENT TO THE SAME VERTEX CAN SHARE THE SAME COUNTER CU AND WE USE A MEAN HEAP ON YOU TO ORGANIZE ALL THE BUDGETS ASSIGNED TO YOU
utt_0363 utt 916.38 927.36 -X THEN WHEN OUR AFFECTING UPDATES UW COMES WE ONLY NEED TO INCREASE CU AND CW BY ONE AND THEN WE LACK DISTRIBUTED TRACKING TECHNIQUE
utt_0367 utt 927.58 930.20 -X TO DECIDE WHICH EDGE NEEDS TO
utt_0368 utt 930.59 945.38 -X RECOMPUTE THE APPROXIMATE SIMILARITY AND NEEDS TO BE RELIABLE PUTTING THE ABOVE TECHNIQUES TOGETHER WE HAVE ACHIEVED THE FOLLOWING RESULTS FOR EVERY UPDATE SEQUENCE CONTAINING BIG M
utt_0374 utt 945.38 952.01 -X UPDATES WE ACHIEVE THIS AMORTIZED COST FOR EACH UPDATE WITH PROBABILITY one MINUS DELTA STAR
utt_0377 utt 952.80 956.65 -X AND IF BIG M EQUALS N TO THE POWER OF SOME CONSTANT
utt_0379 utt 956.87 960.17 -X WE CAN ACHIEVE INDEED O LOG N TO THE POWER OF two
utt_0381 utt 960.26 963.06 -X AMORTIZED COST WITH HIGH PROBABILITY
utt_0382 utt 963.97 967.33 -X AT ALL TIME OUR DATA STRUCTURE REQUIRES
utt_0383 utt 967.87 970.81 -X OM O AND PLUS M SPACE CONSUMPTION
utt_0384 utt 971.36 977.06 -X AND WE CAN OUTPUT THE STRUCTURAL CLUSTERING RESULT IN O AND PLUS ENZYME
utt_0387 utt 978.75 991.01 -X FOR THE CLUSTERING QUALITY WE CAN GUARANTEE THAT THE CLUSTERING RESULT OF OUR ROLE APPROXIMATE CLUSTERING LASTS SOMEWHERE BETWEEN TWO EXACT CLUSTERING RESULTS
utt_0393 utt 992.51 996.44 -X WE OFFER THE SANDWICH GUARANTEE AND
utt_0394 utt 996.45 999.40 -X WHEN WE SET ROW SUFFICIENTLY SMALL
utt_0395 utt 1000.00 1003.33 -X THE APPROXIMATE CLUSTERING RESULT OF OUR ALGORITHM
utt_0397 utt 1003.71 1007.62 -X CAN BE VERY CLOSE TO THE EXACT CLUSTERING RESULT
utt_0399 utt 1008.26 1012.65 -X PLEASE REFER TO OUR PAPER FOR MORE DETAILS ON THIS SANDWICH GUARANTEE
utt_0401 utt 1013.79 1024.77 -X WE FURTHER DEVELOP OUR ALGORITHM TO SUPPORT CLUSTER GROUP BY QUARRY USING THE ABOVE TECHNIQUE WE CAN OUTPUT THE STRUCTURAL CLUSTERING RESULT IN
utt_0407 utt 1024.87 1031.30 -X O N PLUS M TIME AND WHEN THE SIZE OF THE GRAPH IS LARGE OM PLUS M TIME
utt_0410 utt 1031.52 1034.78 -X IS ALSO VERY LARGE SO
utt_0411 utt 1034.82 1040.52 -X IN THIS QUERY WE CAN GROUP VERTICES IN A SUBSET QUEUE BASED ON THEIR CLUSTER IDS
utt_0414 utt 1041.25 1049.16 -X THE MOTIVATION IS THAT SOMETIMES PEOPLE ARE MORE INTERESTED IN A SUBSET THAN THE WHOLE CLUSTERING RESULT
utt_0418 utt 1050.66 1065.54 -X SO FOR OUR RESULTS WE GUARANTEE THE SAME AMORTIZED COST FOR ONE UPDATE AND THE SPACE CONSUMPTION OF OUR DATA STRUCTURE REMAINS O AND PLUS I TIME AND WE CAN OUTPUT THE CLUSTER GROUP BY QUERY RESULT
utt_0424 utt 1065.86 1071.98 -X WITH A WITH A TIME THAT RELATED TO THE SIZE OF Q SO WHEN THE SIZE OF Q IS
utt_0427 utt 1072.23 1078.41 -X MUCH SMALLER THAN M THIS TIME COST IS MUCH SMALLER THAN O N PLUS M
utt_0429 utt 1079.49 1082.57 -2.0453 THIS IS ALL OF MY PRESENTATION THANK YOU
